<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>swift-script</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>#!/usr/bin/swift sh
import Foundation

import ArgumentParser /* @apple/swift-argument-parser ~&gt; 1.2.0  */
import CLTLogger      /* @xcode-actions/clt-logger    ~&gt; 0.8.0  */
import Logging        /* @apple/swift-log             ~&gt; 1.5.3  */
import XcodeTools     /* @xcode-actions               == 0.10.0 */



/* Let’s bootstrap the logger first and make it available globally. */
LoggingSystem.bootstrap{ _ in CLTLogger() }
let logger: Logger = {
	var ret = Logger(label: "main")
	ret.logLevel = .info
	return ret
}()


/* Then call main. */
_ = await Task{ await Main.main() }.value
struct Main : ParsableCommand {
	
	func run() async throws {
		let filepath = CommandLine.arguments.first ?? ""
		FileManager.default.changeCurrentDirectoryPath(URL(fileURLWithPath: filepath).deletingLastPathComponent().deletingLastPathComponent().path)
		
		/* Start your code here. */
		/* Here’s an example of calling a launching a subprocess and waiting for it to finish. */
//		_ = try await ProcessInvocation(
//			"bash", "-c", #"echo Hello world!"#,
//			stdoutRedirect: .none, stderrRedirect: .none
//		).invokeAndGetRawOutput()
	}
	
}


struct SimpleError : Error {
	var message: String
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>ED89F9AF-F645-408D-A907-15EAEFAB1857</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>The full boilerplate for a Swift script.</string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift Script</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
