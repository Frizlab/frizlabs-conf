#!/bin/bash
# vim: ts=3 sw=3 noet
# Adapted from https://github.com/wincent/wincent

# 1. Sets up a local Python environment via virtualenv
# 2. Installs Ansible prerequisites in the virtualenv
# 3. Hands off to Ansible to complete actual installation of dotfiles etc.


set -e
shopt -s nullglob
cd "$(dirname "$0")"


readonly DEPENDENCIES_DIR="dependencies"
readonly ANSIBLE_ENV_SETUP="$DEPENDENCIES_DIR/ansible/hacking/env-setup"
readonly VIRTUALENV_SETUP="$DEPENDENCIES_DIR/virtualenv/virtualenv.py"

readonly VIRTUALENV_TARGET_DIR=".virtualenv"
readonly VIRTUALENV_ACTIVATE="$VIRTUALENV_TARGET_DIR/bin/activate"


usage() {
	echo "usage: run-ansible [options] [roles...]"
	echo
	echo "Supported options:"
	echo "   -f/--force   force the reinstallation of the virtualenv and the pip dependencies"
	echo "   -h/--help    show the help and exit"
	echo "   -v/--verbose (repeat up to four times for more verbosity)"
	echo
	echo "Other options (passed through to Ansible):"
	echo "   --check"
	echo "   --step"
	echo "   --start-at-task='role | task'"
	echo
	echo "The script will:"
	echo "   1. Sets up a local Python 3 environment via virtualenv"
	echo "   2. Installs Ansible prerequisites in the virtualenv"
	echo "   3. Hands off to Ansible to complete actual installation of dotfiles etc."
	echo
	echo "Note: Python3 is required for the script to launch. Try to launch the script"
	echo "      without Python3 installed for a rationale."
	echo
	echo "Supported roles:"
	pushd roles >/dev/null 2>&1
	for ROLE in *; do
		echo "   $ROLE: $(cat $ROLE/description 2>/dev/null || echo "<no description>")"
	done
	popd >/dev/null 2>&1
}

EXTRA_ARGS=()
while [ $# -gt 0 ]; do
	case "$1" in
		--force   | -f) FORCE=1;;
		--verbose | -v) VERBOSE=$((VERBOSE + 1));;
		-vv)            VERBOSE=$((VERBOSE + 2));;
		-vvv)           VERBOSE=$((VERBOSE + 3));;
		-vvvv)          VERBOSE=$((VERBOSE + 4));;
		--help | -h | help)
			usage
			exit 0
		;;
		"")
			echo "Got invalid empty arg" >/dev/stderr
			echo >/dev/stderr
			usage >/dev/stderr
			exit 1
		;;
		*)
			if [ -d "roles/$1" ]; then
				if [ -z "$ROLES" ]; then
					ROLES="--tags $1"
				else
					ROLES="$ROLES,$1"
				fi
			elif [[ "$1" == --* ]]; then
				EXTRA_ARGS+=("$1")
			else
				echo "Unrecognized argument(s): $*" >/dev/stderr
				usage
				exit 1
			fi
		;;
	esac
	shift
done

if [[ "$VERBOSE" ]]; then
	DEV_NULL=/dev/stdout
	if [ "$VERBOSE" -ge 4 ]; then
		echo 'Enabling extremely verbose output'
		set -x
	fi
else
	trap 'echo "Exiting: run with -v/--verbose for more info"' EXIT
	DEV_NULL=/dev/null
fi

# Python3 dependency check
if ! which -s python3; then
	echo "ERROR: Python 3 is required for this conf management repo." >/dev/stderr
	echo >/dev/stderr
	echo "Ansible works fine with Python 2, and Python 2 is the only Python" >/dev/stderr
	echo "installed on macOS by default. Would it make sense to use Python2" >/dev/stderr
	echo "instead of Python 3? Yes. However I consider Python 2 as obsolete" >/dev/stderr
	echo "(and so does Python: https://www.python.org/dev/peps/pep-0373/)." >/dev/stderr
	echo "Thus, I force the usage of Python 3 whenever I can…" >/dev/stderr
	echo >/dev/stderr
	echo "AFAIK, there should only be the inventory.py script (in this repo) and" >/dev/stderr
	echo "the virtualenv setup (in this script) that should have to be modified" >/dev/stderr
	echo "to have everything working with Python2, if need be." >/dev/stderr
	exit 1
fi

if [ ! -e "$VIRTUALENV_SETUP" ]; then
	echo "Not found: $VIRTUALENV_SETUP" >/dev/stderr
	echo "Did you forget to 'git submodule update --init --recursive'?" >/dev/stderr
	exit 1
fi

if [ ! -e "$ANSIBLE_ENV_SETUP" ]; then
	echo "Not found: $ANSIBLE_ENV_SETUP" >/dev/stderr
	echo "Did you forget to 'git submodule update --init --recursive'?" >/dev/stderr
	exit 1
fi

if [[ ! -e "$VIRTUALENV_ACTIVATE" || "$FORCE" ]]; then
	"$VIRTUALENV_SETUP" -p python3 "$VIRTUALENV_TARGET_DIR" >"$DEV_NULL"
elif [ -e "$VIRTUALENV_ACTIVATE" ]; then
	echo "Skipping virtualenv install (already exists); use --force to override" >"$DEV_NULL"
fi

source "$VIRTUALENV_ACTIVATE"

# Install needed pip dependencies
if [[ -z "$(pip show paramiko pycrypto PyYAML Jinja2 httplib2)" || "$FORCE" ]]; then
	if ! pip install paramiko pycrypto PyYAML Jinja2 httplib2 >"$DEV_NULL"; then
		echo "Failed: pip install" >/dev/stderr
		echo "Did you forget to 'export https_proxy=fwdproxy:8080' or similar?" >/dev/stderr
		exit 1
	fi
elif [[ ! "$FORCE" ]]; then
	echo "Skipping pip installs (already exists); use --force to override" >"$DEV_NULL"
fi

# Per-run the inventory script to update the ansible group cache and avoid
# having user input required during the Ansible run (Ansible catches the output
# of the script).
python ./inventory.py --update-cache-only >"$DEV_NULL"

# I don’t really like hidding all output from a program, but this one prints a
# useless warning on macOS on stderr, so I silence it!
source "$DEPENDENCIES_DIR/ansible/hacking/env-setup" &>"$DEV_NULL"

readonly HOST_OS="$(uname)"
readonly ANSIBLE_VERBOSE_OPTION="${VERBOSE+-$(printf 'v%.0s' $(seq $VERBOSE))}"

# Note: If we need sudo in a playbook: pass “--ask-become-pass” to ansible-playbook
case "$HOST_OS" in
	Darwin) ansible-playbook $ANSIBLE_VERBOSE_OPTION ${ROLES} "${EXTRA_ARGS[@]}" playbooks/darwin.yml;;
	Linux)  ansible-playbook $ANSIBLE_VERBOSE_OPTION ${ROLES} "${EXTRA_ARGS[@]}" playbooks/linux.yml;;
	*) echo "Unknown host OS: $HOST_OS" >/dev/stderr; exit 1;;
esac

trap - EXIT
